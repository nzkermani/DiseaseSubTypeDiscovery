View(data)
View(data)
for(i in 1:508)
plot(data[,i])
pause()
testit <- function(x)
{
p1 <- proc.time()
Sys.sleep(x)
proc.time() - p1 # The cpu usage should be negligible
}
testit(3.7)
for(i in 1:508)
plot(data[,i])
testit(1)
end
for(i in 1:508)
{ plot(data[,i])
testit(1)
}
hist(data[,1])
Genemaen = colMeans(data)
GeneMax <- function(data) sapply(data, max, na.rm = TRUE)
GeneMin <- function(data) sapply(data, min, na.rm = TRUE)
plot(GeneMin)
GeneMin
GeneMax(data)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(Genemaen)
points(gemeMax, 'r')
points(gemeMax, 'red')
points(gemeMax)
plot(Genemaen)
points(gemeMax, col ='red')
points(gemeMin, col = 'blue')
plot(Genemaen, ylim = c(min(gemeMin), max(gemeMax)))
points(gemeMax, col ='red')
points(gemeMin, col = 'blue')
dataScaled = scale(data);
dataSafety<-functoin(data)
{
Genemaen = colMeans(data)
GeneMax <- function(data) sapply(data, max, na.rm = TRUE)
GeneMin <- function(data) sapply(data, min, na.rm = TRUE)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(Genemaen, ylim = c(min(gemeMin), max(gemeMax)))
points(gemeMax, col ='red')
points(gemeMin, col = 'blue')
}
dataSafety(data)
dataSafety<-function(data)
{
Genemaen = colMeans(data)
GeneMax <- function(data) sapply(data, max, na.rm = TRUE)
GeneMin <- function(data) sapply(data, min, na.rm = TRUE)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(Genemaen, ylim = c(min(gemeMin), max(gemeMax)))
points(gemeMax, col ='red')
points(gemeMin, col = 'blue')
}
dataSafety(data)
dataSafety(dataScaled)
install.packages("factoextra")
library("factoextra")
res.pca <- prcomp(data, scale = TRUE)
fviz_eig(res.pca)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
res.pca <- prcomp(data, scale = TRUE)
fviz_eig(res.pca)
plot(prcomp(res.pca ))
res.pca <- prcomp(data, scale = TRUE)
plot(res.pca)
summary(prcomp(res.pca , scale = TRUE))
summary(res.pca)
biplot(res.pca)
plot(res.pca)
biplot(res.pca)
install.packages("ggfortify")
.libPaths()
install.packages("ggfortify", lib = "C:/Program Files/R/R-3.2.3/library" )
install.packages("ggfortify", lib = ""C:\Program Files\R\R-3.2.3\library"  )
install.packages("ggfortify", lib = "C:\Program Files\R\R-3.2.3\library"  )
install.packages("ggfortify", lib = "C:\Users\nz1413\Desktop\AnalysisTag"  )
install.packages("ggfortify", lib = "C:/Users/nz1413/Desktop/AnalysisTag/"  )
install.packages("ggfortify", lib = "C:/Users/nz1413/Desktop/AnalysisTag/", dependencies = TRUE   )
install.packages("ggfortify", lib = "C:/Users/nz1413/Desktop/AnalysisTag/", dependencies = TRUE   )
install.packages("lintr", lib = "C:/Users/nz1413/Desktop/AnalysisTag/", dependencies = TRUE   )
ver
version
View(a)
version
install.packages('ggfortify')
library(ggfortify)
autoplot(prcomp(dataScaled))
dataSafety<-function(data)
{
Genemaen = colMeans(data)
GeneMax <- function(data) sapply(data, max, na.rm = TRUE)
GeneMin <- function(data) sapply(data, min, na.rm = TRUE)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(Genemaen, ylim = c(min(gemeMin), max(gemeMax)))
points(gemeMax, col ='red')
points(gemeMin, col = 'blue')
}
dataScaled = scale(data);
dataSafety(dataScaled);
data <- t(read.table("C:/Users/nz1413/Desktop/dataTAC/sputum_508genes.txt",
header = TRUE))
dataSafety(data)
dataSafety<-function(data)
{
Genemaen = colMeans(data)
GeneMax <- function(data) sapply(data, max, na.rm = TRUE)
GeneMin <- function(data) sapply(data, min, na.rm = TRUE)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(Genemaen, ylim = c(min(gemeMin), max(gemeMax)))
points(gemeMax, col ='red')
points(gemeMin, col = 'blue')
}
dataSafety(data)
View(data)
dataScaled = scale(data);
dataSafety(dataScaled);
autoplot(prcomp(dataScaled))
iris$Species
clinical <- t(read.table("C:/Users/nz1413/Desktop/dataTAC/p4Tac2.txt",
header = TRUE))
clinical <- t(read.table("C:/Users/nz1413/Desktop/dataTAC/p4Tac2.txt",
header = TRUE))
View(clinical)
clinical[2,]
factor(clinical[2,])
clinic = factor(clinical[2,])
autoplot(prcomp(dataScaled), data = dataScaled, colour = clinic)
autoplot(kmeans(dataScaled, 3), data = dataScaled)
kmeans(dataScaled, 3)
a = kmeans(dataScaled, 3)
a$cluster
a$size
a$cluster
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
a = kmeans(dataScaled, 4)
autoplot(kmeans(dataScaled, 4), data = dataScaled)
a = kmeans(dataScaled, 4)
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
a = kmeans(dataScaled, 5)
a = kmeans(dataScaled, 5)
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
a = kmeans(dataScaled, 6)
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
a = kmeans(dataScaled, 7)
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
set.seed(1)
a = kmeans(dataScaled, 8)
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
a = kmeans(dataScaled, 6)
autoplot(prcomp(dataScaled), data = dataScaled, colour = a$cluster)
install.packages('NbClust')
library(NbClust)
res <- NbClust(dataScaled, distance = "euclidean", min.nc = 2, max.nc = 8,
+ method = "ward.D2", index = "duda")
res <- NbClust(dataScaled, distance = "euclidean", min.nc = 2, max.nc = 8,
method = "ward.D2", index = "duda")
example("NbClust")
res <- NbClust(dataScaled, distance = "euclidean", min.nc = 2, max.nc = 8)
res <- NbClust(dataScaled, distance = "euclidean", min.nc = 2, max.nc = 8, method = 'kmeans')
res <- NbClust(dataScaled, distance = "euclidean", min.nc = 2, max.nc = 8, method = 'kmeans')
res <- NbClust(data, distance = "euclidean", min.nc = 2, max.nc = 8, method = 'kmeans')
res <- NbClust(data, distance = "euclidean", min.nc = 2, max.nc = 18, method = 'kmeans')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages('exdir')
devtools::install_github('IRkernel/IRkernel')
install.packages("curl")
install.packages("curl")
devtools::install_github('IRkernel/IRkernel')
install.packages('Knitr')
install.packages('knitr')
library(knitr)
demo(knitr)
example(knitr)
source("https://bioconductor.org/biocLite.R")
biocLite("ConsensusClusterPlus")
source("https://bioconductor.org/biocLite.R")
biocLite("ConsensusClusterPlus")
knitr::opts_chunk$set(echo = TRUE)
library(pvclust)
result <- parPvclust(cl=NULL,data=t(dataScaled), method.dist="cor", method.hclust="complete", nboot=100)
indTAC3 = which(temp[1,]=="3")
temp <- t(read.table("C:/Users/nz1413/Desktop/dataTAC/correspondanceTAC.txt",
header = FALSE))
indTAC3 = which(temp[1,]=="3")
result <- pvclust(t(dataScaled[indTAC3,]), method.dist="cor", method.hclust="complete", nboot=100)
plot(result, hang=-1, cex=0.5)
pvrect(result, alpha=0.95)
clusters = pvpick(result, alpha=0.95)
patientIDS = unlist(sapply(clusters$clusters, function(x) x))
clusrerID = c(rep(1, length(clusters$clusters[[1]])), rep(2, length(clusters$clusters[[2]])), rep(3, length(clusters$clusters[[3]])))
clusters
length(clusters[[1]])
length(clusters$clusters[[1]])
length(clusters$clusters[[2]])
24+28
clusrerID = c(rep(1, length(clusters$clusters[[1]])), rep(2, length(clusters$clusters[[2]])))
clusrerID
junk = row.names(dataScaled)
junk
indpatientsTAC3inData = match(patientIDS, junk)
indpatientsTAC3inData
dataTAC3 = dataScaled[indpatientsTAC3inData,]
a = kmeans(dataTAC3, 2)
a
autoplot(prcomp(dataTAC3), data = dataTAC3, colour = a$cluster)
library(NbClust)
library(ggfortify)
autoplot(prcomp(dataTAC3), data = dataTAC3, colour = a$cluster)
autoplot(prcomp(dataTAC3), data = dataTAC3, colour = a$cluster)
library(CMA)
set.seed(321)
fiveCVdat <- GenerateLearningsets(y=clusrerID, method = "CV",
fold = 5, strat = TRUE)
varsel_ftest <- GeneSelection(X = dataTAC3, y=clusrerID,
learningsets = fiveCVdat, method = "f.test")
varsel_kruskaltest <- GeneSelection(X = dataTAC3, y=clusrerID,
learningsets = fiveCVdat, method = "kruskal.test")
varsel_rf <- GeneSelection(X = dataTAC3, y=clusrerID,
learningsets = fiveCVdat, method = "rf")
varsel_boosting <- GeneSelection(X = dataTAC3, y=clusrerID,
learningsets = fiveCVdat, method = "boosting", mstop = 1000)
clinical_data <- read.table("C:/Users/nz1413/Desktop/dataTAC/clinical_620.txt", header = TRUE)
indTAC3inClinicalData = match(patientIDS,clinical_data$Patient)
TAC3inClinicalData = clinical_data[indTAC3inClinicalData, ]
df2 <- data.frame(
gp = clusrerID,
TAC3inClinicalData
)
indout = rep(1,dim(df2)[2])
for(i in 2:dim(df2)[2])
{
if(is.numeric(df2[,i]))
{
if(length(which(is.na(df2[,i])))/length(df2$gp) < 0.2)
indout[i]=0
}
}
forPlot = df2[,which(indout==0)]
library(missForest)
forplot.imp = missForest(forPlot, ntree = 1000, verbose = TRUE)
names= factor(df2$gp)
for(i in 1:dim(forplot.imp$ximp)[2])
{
# Data
value=forplot.imp$ximp[,i]
data=data.frame(names,value)
#Graph
qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
}
dev.off()
# Data
value=forplot.imp$ximp[,i]
data=data.frame(names,value)
#Graph
qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
# Data
value=forplot.imp$ximp[,i]
data=data.frame(names,value)
#Graph
qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
i=6
# Data
value=forplot.imp$ximp[,i]
data=data.frame(names,value)
#Graph
qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
# Data
value=forplot.imp$ximp[,i]
data=data.frame(names,value)
#Graph
qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
p<-qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
print(p)
i=7
p<-qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
print(p)
library(pvclust)
result <- parPvclust(cl=NULL,data=t(dataScaled), method.dist="cor", method.hclust="complete", nboot=100)
indTAC3 = which(temp[1,]=="3")
result <- pvclust(t(dataScaled[indTAC3,]), method.dist="cor", method.hclust="complete", nboot=100)
plot(result, hang=-1, cex=0.5)
pvrect(result, alpha=0.95)
clusters = pvpick(result, alpha=0.95)
patientIDS = unlist(sapply(clusters$clusters, function(x) x))
clusrerID = c(rep(1, length(clusters$clusters[[1]])), rep(2, length(clusters$clusters[[2]])))#, rep(3, length(clusters$clusters[[3]])))
junk = row.names(dataScaled)
indpatientsTAC3inData = match(patientIDS, junk)
dataTAC3 = dataScaled[indpatientsTAC3inData,]
set.seed(1)
a = kmeans(dataTAC3, 2)
autoplot(prcomp(dataTAC3), data = dataTAC3, colour = a$cluster)
library(CMA)
set.seed(321)
fiveCVdat <- GenerateLearningsets(y=clusrerID, method = "CV",
fold = 5, strat = TRUE)
# Data
value=forplot.imp$ximp[,i]
data=data.frame(names,value)
#Graph
p<-qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
print(p)
names= factor(df2$gp)
for(i in 1:dim(forplot.imp$ximp)[2])
{
# Data
value=forplot.imp$ximp[,i]
data=data.frame(names,value)
#Graph
p<-qplot(x=names ,y=value ,data=data ,geom=c("boxplot","jitter") , fill=names, main = colnames(forplot.imp$ximp)[i])
print(p)
}
clusrerID = c(rep(1, length(clusters$clusters[[1]])), rep(2, length(clusters$clusters[[2]])))
clusrerID
indTAC3 = which(temp[1,]=="3")
indTAC3
result <- pvclust(t(dataScaled[indTAC3,]), method.dist="cor", method.hclust="complete", nboot=100)
plot(result, hang=-1, cex=0.5)
pvrect(result, alpha=0.95)
clusters = pvpick(result, alpha=0.95)
clusters
indTAC3
pvrect(result, alpha=0.9)
plot(result, hang=-1, cex=0.5)
indTAC3
result <- pvclust(t(dataScaled[indTAC3,]), method.dist="cor", method.hclust="complete", nboot=100)
result
plot(result, hang=-1, cex=0.5)
plot(result, hang=-1, cex=0.5)
pvrect(result, alpha=0.9)
plot(result, hang=-1, cex=0.5)
pvrect(result, alpha=0.9)
clusters = pvpick(result, alpha=0.95)
clusters
clusters = pvpick(result, alpha=0.9)
clusters
set.seed(113)
result <- parPvclust(cl=NULL,data=t(dataScaled), method.dist="cor", method.hclust="complete", nboot=100)
plot(result, hang=-1, cex=0.5)
pvrect(result, alpha=0.9)
pvrect(result, alpha=0.95)
plot(result, hang=-1, cex=0.5)
pvrect(result, alpha=0.95)
clusters = pvpick(result, alpha=0.95)
clusters
set.seed(114)
result <- parPvclust(cl=NULL,data=t(dataScaled), method.dist="cor", method.hclust="complete", nboot=100)
clusters = pvpick(result, alpha=0.95)
clusters
result <- parPvclust(cl=NULL,data=t(dataScaled), method.dist="euclidean", method.hclust="complete", nboot=100)
clusters = pvpick(result, alpha=0.95)
clusters
result <- parPvclust(cl=NULL,data=t(dataScaled), method.dist="euclidean", method.hclust="complete", nboot=100)
clusters = pvpick(result, alpha=0.95)
clusters
dim(dataScaled)
set.seed(114)
result <- parPvclust(cl=NULL,data=t(dataScaled), method.dist="cor", method.hclust="complete", nboot=1000)
Read the data and check for outliers:
````{r definition, echo = FALSE}
dataSafety<-function(data)
{
plot_colors <- c('black',"blue","red")
Genemaen = colMeans(data)
GeneMax <- function(data) apply(data,2, max, na.rm = TRUE)
GeneMin <- function(data) apply(data,2, min, na.rm = TRUE)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(gemeMin, ylim = c(min(gemeMin), max(gemeMax)),  col =plot_colors[1],pch=1)
points(Genemaen, col =plot_colors[2],pch=1)
points(gemeMax, col =plot_colors[3],pch=1)
legend('topright', c('min','means','max'), cex=0.8, col=plot_colors,pch=1);
}
```
knitr::opts_chunk$set(echo = TRUE)
````{r definition, echo = FALSE}
dataSafety<-function(data)
{
plot_colors <- c('black',"blue","red")
Genemaen = colMeans(data)
GeneMax <- function(data) apply(data,2, max, na.rm = TRUE)
GeneMin <- function(data) apply(data,2, min, na.rm = TRUE)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(gemeMin, ylim = c(min(gemeMin), max(gemeMax)),  col =plot_colors[1],pch=1)
points(Genemaen, col =plot_colors[2],pch=1)
points(gemeMax, col =plot_colors[3],pch=1)
legend('topright', c('min','means','max'), cex=0.8, col=plot_colors,pch=1);
}
data <- t(read.table("C:/Users/nz1413/Desktop/dataTAC/sputum_508genes.txt",                        header = TRUE))
dataSafety(data)
dataSafety<-function(data)
{
plot_colors <- c('black',"blue","red")
Genemaen = colMeans(data)
GeneMax <- function(data) apply(data,2, max, na.rm = TRUE)
GeneMin <- function(data) apply(data,2, min, na.rm = TRUE)
gemeMax = GeneMax(data)
gemeMin = GeneMin(data)
plot(gemeMin, ylim = c(min(gemeMin), max(gemeMax)+3),  col =plot_colors[1],pch=1, ylab='Gene expression')
points(Genemaen, col =plot_colors[2],pch=1)
points(gemeMax, col =plot_colors[3],pch=1)
legend('topright', c('min','means','max'), cex=0.8, col=plot_colors,pch=1);
}
dataSafety(data)
dataScaled = scale(data)
dataSafety(dataScaled)
load('progencyKmeans.Rdata')
plot(pc, errorbar = TRUE, type = 'b')
plot(pc$ncluster, pc$score)
plot(pc$ncluster, pc$mean.score)
par(mfrow=c(2,2))
plot(pc$ncluster, pc$mean.score)
plot(pc$ncluster, pc$mean.gap)
plot(1:6, pc$mean.gap)
library("ggplot2", lib.loc="\\\\icnas3.cc.ic.ac.uk/nz1413/R/win-library/3.4")
install.packages("tibble")
getwd(0)
getwd()
setwd('G:\')
/
getwd()
setwd("G:\")
d <- 5
for(i in 1:10) {
nam <- paste("A", i, sep = "")
assign(nam, rnorm(3)+d)
}
nam
A10
help("assign")
a <- 1:4
assign("a[1]", 2)
a[1] == 2          # FALSE
get("a[1]") == 2   # TRUE
a
a <- 1:4+3
assign("a[1]", 2)
a[1] == 2          # FALSE
get("a[1]") == 2   # TRUE
a
assign("a[1]", 2)
PVALUEFORFEATURES<-function(varselectionActual, matrixPermutated)
{
nvars = dim(matrixPermutated)[2]
nPermutations = dim(matrixPermutated)[1]
temPvalue = temPvalue = matrix(0,1,nvars)
for(i in 1:nvars)
{
temp = which(varselectionActual@rankings[[1]]==i)
temPvalue[1,i] = length(which(matrixPermutated[,i]>
varselectionActual@importance[[1]][temp]))
}
return(temPvalue/nPermutations)
}
PVALUEFORFEATURES<-function(varselectionActual, matrixPermutated)
{
nvars = dim(matrixPermutated)[2]
nPermutations = dim(matrixPermutated)[1]
temPvalue = temPvalue = matrix(0,1,nvars)
for(i in 1:nvars)
{
temp = which(varselectionActual@rankings[[1]]==i)
temPvalue[1,i] = length(which(matrixPermutated[,i]>
varselectionActual@importance[[1]][temp]))
}
return(temPvalue/nPermutations)
}
getwd()
setwd('C:/Users/nz1413/Desktop/AnalysisTag/Final/code/regression/')
dir()
clinical <- read.table("C:/Users/nz1413/Desktop/dataTAC/clinical_620Modified.csv",  header = TRUE, sep = ",")
data <- t(read.table("C:/Users/nz1413/Desktop/dataTAC/sputum_508genes.txt",  header = TRUE))
dataScaled = scale(data)
library(mclust)
mbc<-Mclust(dataScaled)
summary(mbc)
# find the clinical vatiable for data
temp = match(rownames(dataScaled) , as.character(clinical$Patient))
clinicalData = clinical[temp,]
# Data imputation
clinicalData$gp = mbc$classification
indout = rep(1,dim(clinicalData)[2])
for(i in 4:dim(clinicalData)[2])
{
if(is.numeric(clinicalData[,i]))
{
if(length(which(is.na(clinicalData[,i])))/length(clinicalData$gp) < 0.2)
indout[i]=0
}
}
forPlot = clinicalData[,which(indout==0)]
library(missForest)
forplot.imp = missForest(forPlot, maxiter = 100, ntree = 10000, verbose = TRUE )
imputatedClinicalData = forplot.imp$ximp
require(reshape2)
Label = mbc$classification
imputatedClinicalData$Label = factor(Label)
